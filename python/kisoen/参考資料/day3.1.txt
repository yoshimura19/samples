□Python のプログラムをファイル化して実行する (Linux / MacOS X 編): 初級テスト
Shebang(シェバン)
#!/usr/bin/python
パス上のpythonを探して実行してくれる。


□pythonにおける変数とは？

•メモリー上に保存されているデータのうち，特定のデータに名前を付けたもの

変数 abc = 123
アドレス0x10030f1c0に123を格納
変数 xyz = 3.75 
アドレス0x100310470に3.75を格納
変数 zzz = xyz
zzz はアドレスxyzを参照するようにする（値は3.75）


□pythonにおける変数の型
type()で型を調べる
float (浮動小数点数) 
単純な型(POD:Plain Old Data)
単純でない方(non-POD)

type(12345678901234567890)
<type 'long'>

Q. Plain Old Type と見なされない型はどれか？
A. str型　メモリー上で占める大きさが一定と限らない事が多い．基本的にメモリー上の２カ所以上に分散して
保存する事が多い．分散した崎はアドレスを格納しておく事で覚えておく．
単純な型は整数値•実数値•論理値など言語の基本機能として備わっている型でメモリー上でしめる大きさが
いつも一定であるのが特徴


□Pythonの代入分における評価の順序
右辺が完全に評価してから左辺の変数に代入する．
a = 2
b = 3
a, b = b, a (3,2が入る)


□if文
インデントを合わせる :

□リスト（他言語の配列に相当する）
a = [‘Jhon’, ‘Alice’, ‘Bob’]
a[0] = ‘John’
a[-1] = ‘Bob’
a.append(‘Foo’)  (最後に加える)
a.remove(‘Foo’)


□pythonのリストにどんな機能があるか調べる(pydoc編)
pydoc list

a = [5, 3, 4, 10]
a.reverse()    [10,4,3,5]
a.sort()     [3,4,5,10]


□pythonの基本制御構造
range(5)
[0, 1, 2, 3, 4]  #右端は入らない
for i in [9, 3, 1, 4, 5]:
	print i
range(10, 0, -1)   #[10, 9, 8,…,1]
range(1, 11, 3)   #[1, 4, 7, 10)

□pythonの基本制御構造(for文)
#注意
range(-1, -3, -1)  #[-1, -2]
range(-4, -8)   #[]
range(1, 3)   #[1, 2]
range(3)      #[0, 1, 2] 

> print range(2, 11, 3)
[2, 5, 8]

for i in ["bob", "alice", "cat", "dog", "rocket"]:
	print i
>>
bob
alice
cat
dog
rocket


□while文
以下のプログラムを実行した。"F" は何個表示されるか？
a = 100000
while 0 < a:
    b = a
    while 0 < b:
        print "F"
        b = b - 1
    a = a - 1

a = 5だと bのところで5回、4回、3回…、よって(1/2)n*(n+1)の公式を使う
100000*100001/2 = 5000050000


□Pythonの基本制御構造(break文)
無限ループ
while True:       #Falseになることはない
	print “abc”


□continue文
ループを進めないでそのまま実行する
for i in range(10):
	print i
	continue
	print “A”
これはprint”A”文の前にfor文を繰り返す

#   2 3 #
# 1   3 #
# 1 2   #


□複合代入演算子
a += 1 (a = a + 1)
#一般に複合演算子の右辺はひとまとめ（括弧でくくられている）と考えて展開される．つまり，
a *= b + c * d
は　a = a*(b + c * d)と同じ
＃//は切り捨て除算


□pythonの文字列操作
“”は中に’’を入れることができる．
‘’の中にでも\’で’を入力可
\\は\一文字を表す
x = “a\tb”  でprint x
a       b
\tは8の倍数のラインまで進む（桁を揃えたい時に便利）
\nで改行
\rは改行しないで文字のカーソルを一番左に持って行く(キャリッジリターン)
（行末から行頭に戻す復帰コード）

マルチラインの文字列
“””
…
“””
#マルチライン文字列には改行や空白も含める!
\t     #はtで一文字\は特殊文字
>>> a = “abcdefg”
>>> a[1:4]
‘bcd’
>>> a[-4:-2]
'de'
>>> a[-1]
'g'
x = “    asfasf     “
>>> x.strip()       #タブやスペースを削ってくれる    
‘asfasf’   
x = “Oct4, 34, ID_0123”.split(“,”)    #単語を分割しリストにしてくれる
>>> x
[‘Oct4’, ’34’, ‘ID_0123’]
>>> x[1]
‘Oct4’
>>> x = ‘abc’.upper    #大文字に，lowerで小文字に”
>>> x.startswith(“aa”)  #文字列がaaで始まるか調べる




初級テスト
文字列の終端始点は範囲外でもエラーにならない

>>> s5 = "K" + """
...   abc
...   def""" + "R"
>>> len(s5)
14
>>> s5
'K\n  abc\n  defR'
>>> s6 = "ABCXYZ"
>>> s6[-4:-2]
'CX'
>>> s = "\t \tABCXYZ "
>>> print a
ABCXYZ
string.strip
文字列の先頭と末尾から文字を取り除いたコピーを生成して返します。 chars を指定しない場合や None にした場合、先頭と末尾の空白を取り除きます。