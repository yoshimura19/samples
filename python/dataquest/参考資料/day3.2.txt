□pythonにおけるnon-POD型の参照
a = [1, 2, 3]   #あるアドレスにaのリストを記憶
b = a　　　#アドレスがコピーされる
ここで,
a[1] = 9とすると，   #ここでa[1]の場所だけ別のアドレスを参照するようになった．
>>> b
[1, 9, 3]とaだけでなくbも書き変わる

a = [1, 2, 3]
でb = [1, 2, 3]とした場合は，aとbどちらもアドレスを用意しているので，大丈夫
#またaをリストで書き換える場合も新たなアドレスになるので大丈夫


hex(id(a))  #aのアドレス
a = [1, 2, 3] とリストですると
>>> a = [1, 2, 3]
>>> hex(id(a))       #リスト全体(実体のアドレス)
'0x1090fffc8'
>>> hex(id(a[1]))
'0x7fa6d2d053b0'     #とそれぞれの要素が別のアドレスに入れらている。
>>> hex(id(a[2]))
'0x7fa6d2d05398'
>>> hex(id(a[0]))
'0x7fa6d2d053c8'  

ここで、a[1] = 9などの要素を変更して
b = a　とすると、全体（実体）のアドレスをコピーしているので
b[1]も9に書き変わってしまう。

先にaとbの宣言（リスト）を作っておく(中身もつくっておく)、そして中身を代入すると、書き変わらない。
（また全体のアドレスを渡す（コピーする）と、中身も書き変わる）
>>> a = [1, 2, 3]
>>> b = [1, 2, 3]
>>> hex(id(b))
'0x1091267a0'
>>> hex(id(a))
'0x109126710'
>>> b = a
>>> hex(id(b))
'0x109126710'


初級
>>> t = [22]
>>> s = [1, t, t, 4]
>>> v = s[2]     #t(リスト全体のアドレス)が渡されている。
>>> v[0] = 99
>>> print s
[1, [99], [99], 4]


>>> t = [22]
>>> s = [1, t, t, 4]
>>> v = s[2]
>>> v = 99      #リストでなく新しい変数に渡している
>>> print s
[1, [22], [22], 4]


a = [3, 4, 5]
for i in a:
  i += 1      #要素ごとのアドレスの操作なので、aは変わらない。

a = [0] * 10
for i in range(10):
  a[i] = [i]     #渡されているのはアドレス
for j in a:
  j[0] += 10

□pythonで関数
tupple ()でくくって(,)で要素を区切ったもの.複数の（異なる型の）要素をまとめる
>>> “abc %s %.4f %d DEF” % (“Obama”, 1.4513, 123)
'abc Obama 1.4513 123 DEF'   #%で文字列の埋め込み


□fizzbuzz
for …
	if i % 3 == 0 and i % 5 == 0:
		print “fizz buzz”
	elef …
#pythonではelse ifはelif


□リスト内包表記
>>> a = range(10)
>>> b = [3 * x for x in a]
#aのそれぞれの要素をxに代入して3を書けてリストにする．
[0, 3, 6, 9, 12, 15, 18, 21, 24, 27]


初級
['1', '2', 'Fizz', '4', '5', 'Fizz', '7', '8', 'Fizz', '10']

中級
Q. if any(ここを埋める for i in x):
A. i % 2 == 0
>>> [i for i in x if i % 2 == 0]     #True のときのみ 値をリストに加える。
[2, 4, 6, 8]    




□if/whileなどを1行で書く　
if a == 3: print “a==3”   #else文がない時
while 0 < a: print a; a -= 1    # ;で改行を省略

b = 123
#C言語
if(b == 123){
	d = 5;
} else {
	d = 4;
}

#C言語のコンパクト版
d = ((b == 123) ? 5 : 4);

#Python
d = 5 if b == 123 else 4



□Pythonのdict(dictionary)というデータ構造
>>> a = {}
>>> a[‘John’] = 12345
>>> a[‘smith’] = 4567
{‘John’: 12345, ‘Smith’: 4567}   #左をキー，右をvalueという
>>> a[‘John’]
12345          #ディクショナリーはキーを与えるとvalueを取り出す事が出来る
>>> b = a
>>> del b [‘John’]
>>> ‘Smith’ in b    #キーを捜す
True
>>> b.keys()     #キーの一覧
[‘Smith’]
>>> b.values()   #valueの一覧
[4567]
items()   #どっちも


#別の作り方
>>> z = dict(abc = 1234, bbc = 3454, asdf = 234234)
#dictionaryのfor文
>>> for k, v in z.items(): print “%s: %s” % (k,v)
abc: 1234
bbc: 3453
asdf: 234234


□データ構造set
#valueはいらないがkeyの集合が欲しい時→set
#dictionaryやsetでは要素の順番は保存されない.
#dictionary同様にin演算子で存在check可能
>>> z = set([‘y’, ‘x’, ‘z’])
>>> ‘y’ in z; ‘1’ in z
True
False
>>> y = set([‘a’, ‘b’, ‘x’])
>>> z - y
set([‘y’, ‘z’])    #集合の差
>>> z | y; z & y; z^y;
set(['a', 'b', 'y', 'x', 'z']) #和集合
set(['x'])                     #積集合
set(['a', 'b', 'y', 'z'])      #対称和
>>> for i in z: print i
y
x
z
>>> {x * x for x in range(1, 11)}
set([64, 1, 36, 100,…])   #ハッシュの順になる（エラーはなぜ？）


□型キャスト
str(); int();  #文字列;整数(浮動小数点は0に近い方に)
set(l);  リストをセットに
“%dg” % 123  #フォーマット演算子


□ユーザー入力を標準入力やコマンドラインから受けとる
print "Input a number>",
n = raw_input()            #☆コマンドラインから入力
または，
print sys.argv[0]        #sys.argv[0]はコマンド名

if len(sys.argv) <= 1:　              #1のときはコマンド名だけなので
    print "Usage:fizzbuzz2 <number>"
    sys.exit()
    
ni = int(sys.argv[1])    #☆で読み込み


